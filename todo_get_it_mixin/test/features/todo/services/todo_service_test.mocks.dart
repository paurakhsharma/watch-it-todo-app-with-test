// Mocks generated by Mockito 5.4.2 from annotations
// in todo_get_it_mixin/test/features/todo/services/todo_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive/hive.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_get_it_mixin/features/core/services/store_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreService extends _i1.Mock implements _i3.StoreService {
  MockStoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<dynamic> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<dynamic>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<dynamic>);
  @override
  _i4.Future<void> save(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  dynamic get(String? key) => super.noSuchMethod(Invocation.method(
        #get,
        [key],
      ));
}
